<h3>Status of GNUe Reports</h3>
<p>19th November 2001</p>
<p>GNUe Reports has seen a lot of activity in the last few months. We are nearing our initial release. In light of the 0.1.0 release of Forms, Designer, and Common, I thought a status report would be in order.</p>
<hr>
<h5>Overview of Reports:</h5>

<br />

Reports is composed of three "modules":

<br />



<br />

  * The Reports Engine:

<br />

    This module (and it is literally a Python module :) is responsible for parsing an XML-based report definition, connecting to the datasources via GNUe-Common, and converting the results to a developer-specified  XML format (as defined in the Report Definition.) This module is the backbone of GNUe-Reports (and hopefully GNUe Integrator, once development  on it starts). The Reports Engine is basically a database-to-XML translation engine with a lot of nifty features to make the translations as easy, and versatile, as possible.

<br />



<br />

  * The Reports Server:

<br />

    This module (yet to be completed -- see the notes below) maintains a cache of Reports Engines and exposes the Reports Engine's methods to the public via GNUe-Common's RPC abstraction (see description below).

<br />



<br />

  * The Reports Client:

<br />

    This module (also yet to be completed) calls the Reports Server via one of GNUe-Common's RPC methods. A client can be run via the command line, or other tools, such as GNUe Forms, can act as a Reports client.

<br />



<br />

<h5>Status</h5>

<br />

What reports can do now:

<br />



<br />

  * Reports fully utilizes the GNUe-Common package, which means it supports all major relational databases.

<br />



<br />

  * Reports does not use any platform-specific code, so it should run on any system that GNUe-Common and Python runs on. (Note: [1] it has only been tested on Linux to date; [2] even though GNUe-Common runs on most platforms, the database driver you need may not!)

<br />



<br />

  * Reports does not currently have a working server/daemon interface. However, a command-line tool, grrun, does create a temporary Reports Engine. This means that you can currently run reports from the command line using single instances of the engine.

<br />



<br />

  * Reports supports runtime sort options. Basicially, this means a report designer can create a variety of methods in which a report can be sorted and give each method an id.  When running the report, the user can pass this id to the report and this will determine how the report will be sorted.

<br />



<br />

  * Reports supports runtime parameters that can be dynamically placed in the datasource's where clause at runtime.

<br />



<br />

  * Reports supports banding, or grouping, of datasources. Basically, this means if you have a set of rows like such:

<br />



<br />

       Joe Cool's Blues, Winton Marsalis, Track 1, Linus & Lucy

<br />

       Joe Cool's Blues, Winton Marsalis, Track 2, Buggy Ride

<br />

       Joe Cool's Blues, Winton Marsalis, Track 3, Peppermint Patty

<br />

       Joe Cool's Blues, Winton Marsalis, Track 4, On Peanuts Playground

<br />

       Voice of an Angel, Charlotte Church, Track 1, Pie Jesu

<br />

       Voice of an Angel, Charlotte Church, Track 2, Panis Angelicus

<br />

       Voice of an Angel, Charlotte Church, Track 3, In Trutina

<br />

       Voice of an Angel, Charlotte Church, Track 4, Danny Boy

<br />



<br />

    Reports can group them into a format such as this:

<br />



<br />

       Joe Cool's Blues by Winton Marsalis

<br />

          Track 1     Linus & Lucy

<br />

          Track 2     Buggy Ride

<br />

          Track 3     Peppermint Patty

<br />

          Track 4     On Peanuts Playground

<br />



<br />

       Voice of an Angel by Charlotte Church

<br />

          Track 1     Pie Jesu

<br />

          Track 2     Panis Angelicus

<br />

          Track 3     In Trutina

<br />

          Track 4     Danny Boy

<br />



<br />

    and even run aggregate functions at various levels.

<br />



<br />



<br />

What Reports will do "Real Soon" (hopefully by the premiere release):

<br />



<br />

  * Reports can output any form of XML. However, we are trying to formalize the GNUe reporting format so that all of our packaged apps will use a common XML format. This will allow us to write some nifty XML-to-whatever translators and convert our report output to text, PS, PDF, HTML, spreadsheet formats, etc, etc, etc.

<br />



<br />

  * We are working on an RPC abstraction layer in GNUe-Common. This interface will allow us to export our methods in a variety of ways (via CORBA, XML-RPC, SOAP, etc.)

<br />



<br />

    As soon as this is functional, Reports will become a Server-based application and grrun will become a command-line client to this server.

<br />



<br />

  * Basic summary functions (field aggregate functions such as Sum, Count, Average, etc.) Work has started on this, but is not fully debugged.

<br />



<br />



<br />

Short-term Goals for Reports (hopefully within 6 months):

<br />



<br />

  * Add trigger/event support to do complex summaries, etc.

<br />



<br />



<br />

Long Term Goals for Reports:

<br />



<br />

  * The Reports engine will hopefully be a base for the GNUe Integrator tool.

<br />



<br />



<br />

<h5>Final Notes</h5>
<br />



<br />

Please do not ask for timelines on when various reporting features will be completed.  This is a volunteer project and, as such, a timeline is nothing more than guesswork.  However, several GNUe core developers need a reports application as soon as possible, so this project is actively being worked on.

<br />



<br />



<br />

-- Jason</p>
<hr>
<p><a href="old.html">Return</a> to GNUe News Archive</p>


