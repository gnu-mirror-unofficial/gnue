Title: Trigger Extension for GFEntry and GFForm
Status: Current
Created: 2002-09-04
Revised: 2002-09-10

Introduction
------------

A GFEntry object as defined in GFEntry.py is providing the following
functions in its trigger namespace:

- allowedValues(reload=0)            returns a list of allowed values for 
                                     this entry. If the value list is not 
                                     already loaded from a datasource, or 
                                     if reload is true, it will be reloaded

- autofillBySequence(sequenceName)   set the value of this entry to the next
                                     value of the <sequenceName> sequence

- isEmpty()                          return true, if the value of this entry
                                     is None or ""

It exposed the following values in its trigger namespace:

- readonly                           get/set the readonly state of this entry

- value                              get/set the value of this entry


A GFForm object as defined in GFForm.py is providing the following
functions in the global trigger namespace:

- setFocus(object)                   move the focus/cursor to object <object>

- setStatusText(tip='')              set the text in the status line to: <tip>

- getParameter(name)                 get the user parameter <name>. If 
                                     parameter <name> is not specified then
                                     return its default value.
				     Remark: Parameters can be set on the command
                                             line, just by appending. i.e.
                                             "gnue-forms test.gfd myparam=myvalue"
                                             If no value is passed on the command line,
					     then the default value is pulled from the 
					     parameter's definition ( <parameter> tag .)


Examples
--------    

1. read the user parameter "exchangerate" and multiply it with the value in
   the entry named "dollar" and store it in the entry named "euro", both in
   the block named "exchange".

exchange.euro=getParameter("exchangerate")*exchange.dollar






